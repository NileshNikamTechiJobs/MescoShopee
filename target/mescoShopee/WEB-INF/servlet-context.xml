<?xml version="1.0" encoding="UTF-8"?>

<beans:beans xmlns="http://www.springframework.org/schema/mvc"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:beans="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
 
    <!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
     <beans:bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<beans:property name="locations">
			<beans:list>
				<beans:value>classpath:db.properties</beans:value>				
			</beans:list>
		</beans:property>
	</beans:bean>     
     
    <!-- Enables the Spring MVC @Controller programming model -->
    <annotation-driven />
 
    <!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
    <resources mapping="/resources/**" location="/resources/" />
 
    <!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
    <beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <beans:property name="prefix" value="/WEB-INF/views/" />
        <beans:property name="suffix" value=".jsp" />
    </beans:bean>
       
     
    <!-- Configure to plugin JSON as request and response in method handler -->
    <beans:bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <beans:property name="messageConverters">
            <beans:list>
                <beans:ref bean="jsonMessageConverter"/>
            </beans:list>
        </beans:property>
    </beans:bean>
     
    <!-- Configure bean to convert JSON to POJO and vice versa -->
    <beans:bean id="jsonMessageConverter" 
    	class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
    </beans:bean> 
     
    <context:component-scan base-package="com.mesco.grocery.controller" />
	<context:component-scan base-package="com.mesco.grocery.model" />
	<context:component-scan base-package="com.mesco.grocery.service" />
	<context:component-scan base-package="com.mesco.grocery.dao" />
	
	<!-- Hibernate and DB connection details -->
	
	<beans:bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		
		<beans:property name="dataSource" ref="dataSource" />
		<beans:property name="packagesToScan">
			<beans:list>
				<beans:value>com.mesco.model</beans:value>
			</beans:list>
		</beans:property>
		
		<beans:property name="hibernateProperties">
			<beans:props>
				<beans:prop key="hibernate.dialect">{hibernte.dialect}</beans:prop>
				<beans:prop key="hibernate.current_session_context_class">{hibernate.current_session_context_class}</beans:prop>
				<beans:prop key="hibernate.show_sql">${hibernate.show_sql}</beans:prop>
				<beans:prop key="hibernate.default_batch_fetch_size">${hibernate.default_batch_fetch_size}</beans:prop>
				<beans:prop key="hibernate.jdbc.fetch_size">${hibernate.jdbc.fetch_size}</beans:prop>
				<beans:prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</beans:prop>
			</beans:props>
		</beans:property>
	</beans:bean>	
		
	<beans:bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<beans:property name="sessionFactory" ref="sessionFactory" />
	</beans:bean>

	<beans:tx:annotation-driven transaction-manager="transactionManager" />
	
	<beans:bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<beans:property name="driverClass" value="${jdbc.driverClassName}" />
		<beans:property name="jdbcUrl" value="${jdbc.url}" />
		<beans:property name="user" value="${jdbc.username}" />
		<beans:property name="password" value="${jdbc.password}" />		
	</beans:bean>
     
</beans:beans>
